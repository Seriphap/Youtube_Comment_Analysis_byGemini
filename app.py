# app.py
import streamlit as st
import pandas as pd
import re
from datetime import datetime
from comment_fetcher import get_all_comments
from google import genai

# -----------------------------
# üîê Load API keys from secrets
# -----------------------------
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô .streamlit/secrets.toml:
# YOUTUBE_API_KEY = "YOUR_YOUTUBE_API_KEY"
# GEMINI_API_KEY = "YOUR_GEMINI_API_KEY"
YOUTUBE_API_KEY = secrets["YOUTUBE_API_KEY"]
GEMINI_API_KEY = secrets["GEMINI_API_KEY"]

# -----------------------------
# ü§ñ Gemini Client
# -----------------------------
client = genai.Client(api_key=GEMINI_API_KEY)

# -----------------------------
# üß© Helper Functions
# -----------------------------
VIDEO_ID_RE = re.compile(r'^[A-Za-z0-9_-]{11}$')

def extract_single_video_id(raw_text: str) -> str | None:
    """
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á Video ID ‡∏ï‡∏£‡∏á ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠ URL (watch?v=, youtu.be, shorts, embed)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ video_id (‡∏¢‡∏≤‡∏ß 11 ‡∏ï‡∏±‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
    """
    if not raw_text:
        return None

    text = raw_text.strip()

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô video id ‡∏ï‡∏£‡∏á‡πÜ
    if len(text) == 11 and VIDEO_ID_RE.fullmatch(text):
        return text

    # ‡∏´‡∏≤‡πÉ‡∏ô URL ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    patterns = [
        r'(?:v=)([A-Za-z0-9_-]{11})',              # ...watch?v=VIDEOID
        r'youtu\.be/([A-Za-z0-9_-]{11})',          # youtu.be/VIDEOID
        r'youtube\.com/embed/([A-Za-z0-9_-]{11})', # .../embed/VIDEOID
        r'youtube\.com/shorts/([A-Za-z0-9_-]{11})' # .../shorts/VIDEOID
    ]
    for p in patterns:
        m = re.search(p, text)
        if m:
            return m.group(1)

    return None


def build_prompt(question: str, df: pd.DataFrame, max_chars: int = 30000) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡∏≠‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ Gemini:
    - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'comment' ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
    - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    """
    if "comment" in df.columns:
        comments_series = df["comment"].astype(str)
    else:
        # fallback: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        candidate_cols = [c for c in df.columns if c.lower() in ("text", "content", "message")]
        if candidate_cols:
            comments_series = df[candidate_cols[0]].astype(str)
        else:
            comments_series = df.astype(str).agg(" ".join, axis=1)

    comments_text = "\n".join(comments_series.tolist())
    truncated = False
    if len(comments_text) > max_chars:
        comments_text = comments_text[:max_chars]
        truncated = True

    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏° YouTube ‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á

[‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ]
{question}

[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏°]
{comments_text}

[‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ]
1) ‡∏ï‡∏≠‡∏ö‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° bullet ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
2) ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ (‡∏¢‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏£‡∏ô‡∏≤‡∏°)
3) ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏ß‡∏Å/‡∏•‡∏ö/‡∏Å‡∏•‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
4) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ actionable item ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (1-3)
    """.strip()

    if truncated:
        prompt += "\n\n[‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•"
    return prompt


def ask_gemini(question: str, df: pd.DataFrame) -> str:
    prompt = build_prompt(question, df)
    response = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=prompt
    )
    return response.text


# -----------------------------
# üß≠ Page Config & Header
# -----------------------------
st.set_page_config(
    page_title="YouTube Comment Analysis ‚Äî Single Video (Gemini 2.0 Flash)",
    page_icon="ü§ñ",
    layout="wide"
)
st.header("üïµÔ∏è‚Äç‚ôÇÔ∏è Analysis of YouTube Comments Using Gemini-2.0-Flash")

# -----------------------------
# üìö Sidebar ‚Äî Q&A History
# -----------------------------
with st.sidebar:
    st.subheader("üìú Conversations History")
    if st.session_state.get("qa_history"):
        for i, item in enumerate(reversed(st.session_state.qa_history[-5:]), 1):
            st.markdown(f"**{i}. ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:** {item['question']}")
            st.markdown(f"‚úçÔ∏è ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {item['answer'][:150]}...")
            st.markdown("---")
        if st.button("üóëÔ∏è Clear Conversations History"):
            st.session_state.qa_history = []
            st.info("Cleared.")
    else:
        st.info("No Conversations History")

# -----------------------------
# üéØ Single Video Input
# -----------------------------
st.subheader("üß© Input a YouTube Video ID or URL (Single)")
video_input = st.text_input(
    "‡∏£‡∏∞‡∏ö‡∏∏ YouTube Video ID ‡∏´‡∏£‡∏∑‡∏≠ URL (1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)",
    placeholder="‡πÄ‡∏ä‡πà‡∏ô https://youtu.be/OMV9F9zB4KU ‡∏´‡∏£‡∏∑‡∏≠ OMV9F9zB4KU"
)

video_id = extract_single_video_id(video_input) if video_input else None

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
if video_id:
    st.subheader("‚ñ∂Ô∏è Video Reference")
    st.video(f"https://www.youtube.com/watch?v={video_id}")
    st.caption(f"Video ‚Äî `{video_id}`")

# -----------------------------
# üì• Fetch Comments (Always fresh)
# -----------------------------
fetch_btn = st.button("üîÑ Retrieve the Latest YouTube Comments", type="primary")

if fetch_btn:
    if not video_id:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Video ID/URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô")
        st.stop()

    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å YouTube..."):
        try:
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ top-level comments ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
            df = get_all_comments(
                video_id,
                YOUTUBE_API_KEY,
                include_replies=False,  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô True ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ replies ‡∏î‡πâ‡∏ß‡∏¢
                order="time",           # "time" = ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô, "relevance" = ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                save_to_csv=False
            )

            if df is None or df.empty:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô")
                st.stop()

            # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏° AI ‡∏ï‡πà‡∏≠
            st.session_state.latest_df = df
            st.session_state.latest_video_id = video_id

            st.success(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ {video_id}")

            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô / ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            with st.expander("üîé ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                st.dataframe(df.head, use_container_width=True)

            # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            csv_bytes = df.to_csv(index=False).encode("utf-8-sig")
            st.download_button(
                "‚¨áÔ∏è Download CSV",
                data=csv_bytes,
                file_name=f"youtube_comments_{video_id}_{ts}.csv",
                mime="text/csv"
            )

        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: {e}")
            st.stop()

# -----------------------------
# ü§ñ Ask AI (Gemini)
# -----------------------------
df = st.session_state.get("latest_df")
if df is not None and not df.empty:
    st.subheader("ü§ñ Ask AI")

    # Suggested Questions
    st.markdown("üí° **Suggested Questions**")
    suggestions = {
        "üìà ‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£? (Sentiment)": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ (positive / negative / neutral) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô",
        "üí¨ ‡∏Ñ‡∏ô‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?": "‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÉ‡∏î‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö",
        "üéØ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ / ‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå": "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ",
    }

    if "selected_prompt" not in st.session_state:
        st.session_state.selected_prompt = ""

    cols = st.columns(len(suggestions))
    for i, (label, prompt_text) in enumerate(suggestions.items()):
        if cols[i].button(label):
            st.session_state.selected_prompt = prompt_text

    question = st.text_area(
        "üí¨ Your Question",
        value=st.session_state.selected_prompt,
        placeholder="Example: What are people saying about BYD ?"
    )

    if st.button("üöÄ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini AI"):
        if not question.strip():
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô")
            st.stop()

        with st.spinner("üîç AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
            try:
                answer = ask_gemini(question.strip(), df)
                st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.subheader("üìä ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Gemini:")
                st.write(answer)

                # Save history
                if "qa_history" not in st.session_state:
                    st.session_state.qa_history = []
                st.session_state.qa_history.append({
                    "question": question.strip(),
                    "answer": answer
                })

                # Clear selected suggestion
                st.session_state.selected_prompt = ""

            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Gemini: {e}")
